A <- 2*Q(2, x)/((t-1)*Q(1, x) + 2*Q(2, x))
} else if (Q(1, x) > 0 & Q(2, x) == 0){
A <- 2/((t-1)*(Q(1, x) - 1) + 2)
} else {
A <- 1
}
C_infreq <- 1 - Q(1, x)/sum(x[which(x <= k)])*(1-A)
j <- c(1:k)
b1 <- sum(sapply(j, function(j)j*(j-1)*Q(j, x)))
b2 <- sum(sapply(j, function(j)j*Q(j, x)))
gamma_infreq_square <- max(D_infreq/C_infreq*t/(t - 1)*b1/b2/(b2) - 1, 0)
CV_infreq <- sqrt(gamma_infreq_square)
D_freq <- length(x[which(x > k)])
Q <- function(i, data){length(data[which(data == i)])}
rsg <- matrix(sapply(j, function(j)f(j, x)), 1, k)
cat("(1) BASIC DATA INFORMATION  \n ", fill = TRUE)
cat("             (Number of observed species)  D ", sep = " = ", D, fill = TRUE)
cat("             (Number of samples/quadrats)  t ", sep = " = ", t, fill = TRUE)
cat("             (Cut-off point)               k ", sep = " = ", k, fill = TRUE)
cat("\n\n", fill = TRUE)
cat("   \"Infrequent\" Shared Species Group: (Incidence counts up to cut-off point k)", fill = TRUE)
cat("          Some Statistics:", fill = TRUE)
cat("          ---------------------------------------------------------------------", fill = TRUE)
cat("         ", paste("Q1 =", rsg[1], "; ","Q2 =", rsg[2], "; ",
"Q3 =", rsg[3], "; ","Q4 =", rsg[4], "; ",
"Q5 =", rsg[5], "; ","Q6 =", rsg[6], "; ",
"Q7 =", rsg[7], "; ","Q8 =", rsg[8], "; ",
"Q9 =", rsg[9], "; ","Q10 =", rsg[10]), fill = TRUE)
cat("          ---------------------------------------------------------------------", fill = TRUE)
cat("               (Number of observed species for infrequent species)  D_infreq " , sep = " = ", D_infreq, fill = TRUE)
cat("               (Estimated sample converage for infrequent species)  C_infreq " , sep = " = ", C_infreq, fill = TRUE)
cat("               (Estimated CV for infrequent species)                CV_infreq" , sep = " = ", CV_infreq, fill = TRUE)
cat("\n", fill = TRUE)
cat("   \"Frequent\" Species Group: (Incidence counts over the cut-off point) ", fill = TRUE)
cat("               (Number of observed species for frequent species)       D_freq",  sep = " = ", D_freq, fill = TRUE)
}
basicInci(data, 10)
basicInci <- function(data, k){
data <- as.numeric(data)
t <- data[1]
dat <- data[-1]
x <- dat[which(dat != 0)]
Q <- function(i, data){length(data[which(data == i)])}
D <- length(x)
D_infreq <- length(x[which(x <= k)])
if (Q(1, x) > 0 & Q(2, x) > 0){
A <- 2*Q(2, x)/((t-1)*Q(1, x) + 2*Q(2, x))
} else if (Q(1, x) > 0 & Q(2, x) == 0){
A <- 2/((t-1)*(Q(1, x) - 1) + 2)
} else {
A <- 1
}
C_infreq <- 1 - Q(1, x)/sum(x[which(x <= k)])*(1-A)
j <- c(1:k)
b1 <- sum(sapply(j, function(j)j*(j-1)*Q(j, x)))
b2 <- sum(sapply(j, function(j)j*Q(j, x)))
gamma_infreq_square <- max(D_infreq/C_infreq*t/(t - 1)*b1/b2/(b2) - 1, 0)
CV_infreq <- sqrt(gamma_infreq_square)
D_freq <- length(x[which(x > k)])
Q <- function(i, data){length(data[which(data == i)])}
rsg <- matrix(sapply(j, function(j)f(j, x)), 1, k)
cat("(1) BASIC DATA INFORMATION  \n ", fill = TRUE)
cat("             (Number of observed species)  D ", sep = " = ", D, fill = TRUE)
cat("             (Number of samples/quadrats)  t ", sep = " = ", t, fill = TRUE)
cat("             (Cut-off point)               k ", sep = " = ", k, fill = TRUE)
cat("\n", fill = TRUE)
cat("   \"Infrequent\" Shared Species Group: (Incidence counts up to cut-off point k)", fill = TRUE)
cat("          Some Statistics:", fill = TRUE)
cat("          ---------------------------------------------------------------------", fill = TRUE)
cat("         ", paste("Q1 =", rsg[1], "; ","Q2 =", rsg[2], "; ",
"Q3 =", rsg[3], "; ","Q4 =", rsg[4], "; ",
"Q5 =", rsg[5], "; ","Q6 =", rsg[6], "; ",
"Q7 =", rsg[7], "; ","Q8 =", rsg[8], "; ",
"Q9 =", rsg[9], "; ","Q10 =", rsg[10]), fill = TRUE)
cat("          ---------------------------------------------------------------------", fill = TRUE)
cat("               (Number of observed species for infrequent species)  D_infreq " , sep = " = ", D_infreq, fill = TRUE)
cat("               (Estimated sample converage for infrequent species)  C_infreq " , sep = " = ", C_infreq, fill = TRUE)
cat("               (Estimated CV for infrequent species)                CV_infreq" , sep = " = ", CV_infreq, fill = TRUE)
cat("\n", fill = TRUE)
cat("   \"Frequent\" Species Group: (Incidence counts over the cut-off point) ", fill = TRUE)
cat("               (Number of observed species for frequent species)       D_freq",  sep = " = ", D_freq, fill = TRUE)
}
basicInci(data, 10)
basicAbun <-
function(data, k){
data <- as.numeric(data)
x <- data[which(data != 0)]
n <- sum(x)
D <- length(x)
n_rare <- sum(x[which(x <= k)])
D_rare <- length(x[which(x <= k)])
if (n_rare != 0){
C_rare <- 1 - f(1, x)/n_rare
} else {
C_rare = 1
}
n_abun <- n - n_rare
D_abun <- length(x[which(x > k)])
j <- c(1:k)
a1 <- sum(sapply(j, function(j)j*(j - 1)*f(j, x)))
a2 <- sum(sapply(j, function(j)j*f(j, x)))
if (C_rare != 0){
gamma_rare_hat_square <- max(D_rare/C_rare*a1/a2/(a2 - 1) - 1, 0)
gamma_rare_1_square <- max(gamma_rare_hat_square*(1 + (1 - C_rare)/C_rare*a1/(a2 - 1)), 0)
}else{
gamma_rare_hat_square <- 0
gamma_rare_1_square <- 0
}
CV_rare <- sqrt(gamma_rare_hat_square)
CV1_rare <- sqrt(gamma_rare_1_square)
f <- function(i, data){length(data[which(data == i)])}
r <- c(1:k)
rsg <- matrix(sapply(r, function(r)f(r, x)), 1, k)
cat("(1) BASIC DATA INFORMATION  \n ", fill = TRUE)
cat("             (Number of observed individuals)        n ", sep = " = ", n, fill = TRUE)
cat("             (Number of observed species)            D ", sep = " = ", D, fill = TRUE)
cat("             (Cut-off point)                         k ", sep = "  = ", k, fill = TRUE)
cat("\n", fill = TRUE)
cat("   \"Rare\" Shared Species Group: (Frequencies counts up to cut-off point k)", fill = TRUE)
cat("          Some Statistics:", fill = TRUE)
cat("          ---------------------------------------------------------------------", fill = TRUE)
cat("         ", paste("f1 =", rsg[1], "; ","f2 =", rsg[2], "; ",
"f3 =", rsg[3], "; ","f4 =", rsg[4], "; ",
"f5 =", rsg[5], "; ","f6 =", rsg[6], "; ",
"f7 =", rsg[7], "; ","f8 =", rsg[8], "; ",
"f9 =", rsg[9], "; ","f10 =", rsg[10]), fill = TRUE)
cat("          ---------------------------------------------------------------------", fill = TRUE)
cat("               (Number of observed individuals for rare species)      n_rare",  sep = " = ", n_rare, fill = TRUE)
cat("               (Number of observed species for rare species)          D_rare",  sep = " = ", D_rare, fill = TRUE)
cat("               (Estimation of the sample converage for rare species)  C_rare" , sep = " = ", C_rare, fill = TRUE)
cat("               (Estimation of CV for rare species in ACE)             CV_rare", sep = " = ", CV_rare, fill = TRUE)
cat("               (Estimation of CV1 for rare species in ACE-1)          CV1_rare", sep = " = ", CV1_rare, fill = TRUE)
cat("\n", fill = TRUE)
cat("   \"Abundant\" Species Group: (Frequencies beyond the cut-off point) ", fill = TRUE)
cat("               (Number of observed individuals for abundant species)      n_abun",  sep = " = ", n_abun, fill = TRUE)
cat("               (Number of observed species for abundant species)          D_abun",  sep = " = ", D_abun, fill = TRUE)
}
basicAbun(data, 10)
basicAbun <-
function(data, k){
data <- as.numeric(data)
x <- data[which(data != 0)]
n <- sum(x)
D <- length(x)
n_rare <- sum(x[which(x <= k)])
D_rare <- length(x[which(x <= k)])
if (n_rare != 0){
C_rare <- 1 - f(1, x)/n_rare
} else {
C_rare = 1
}
n_abun <- n - n_rare
D_abun <- length(x[which(x > k)])
j <- c(1:k)
a1 <- sum(sapply(j, function(j)j*(j - 1)*f(j, x)))
a2 <- sum(sapply(j, function(j)j*f(j, x)))
if (C_rare != 0){
gamma_rare_hat_square <- max(D_rare/C_rare*a1/a2/(a2 - 1) - 1, 0)
gamma_rare_1_square <- max(gamma_rare_hat_square*(1 + (1 - C_rare)/C_rare*a1/(a2 - 1)), 0)
}else{
gamma_rare_hat_square <- 0
gamma_rare_1_square <- 0
}
CV_rare <- sqrt(gamma_rare_hat_square)
CV1_rare <- sqrt(gamma_rare_1_square)
f <- function(i, data){length(data[which(data == i)])}
r <- c(1:k)
rsg <- matrix(sapply(r, function(r)f(r, x)), 1, k)
cat("(1) BASIC DATA INFORMATION  \n ", fill = TRUE)
cat("             (Number of observed individuals)  n ", sep = " = ", n, fill = TRUE)
cat("             (Number of observed species)      D ", sep = " = ", D, fill = TRUE)
cat("             (Cut-off point)                   k ", sep = "  = ", k, fill = TRUE)
cat("\n", fill = TRUE)
cat("   \"Rare\" Shared Species Group: (Frequencies counts up to cut-off point k)", fill = TRUE)
cat("          Some Statistics:", fill = TRUE)
cat("          ---------------------------------------------------------------------", fill = TRUE)
cat("         ", paste("f1 =", rsg[1], "; ","f2 =", rsg[2], "; ",
"f3 =", rsg[3], "; ","f4 =", rsg[4], "; ",
"f5 =", rsg[5], "; ","f6 =", rsg[6], "; ",
"f7 =", rsg[7], "; ","f8 =", rsg[8], "; ",
"f9 =", rsg[9], "; ","f10 =", rsg[10]), fill = TRUE)
cat("          ---------------------------------------------------------------------", fill = TRUE)
cat("               (Number of observed individuals for rare species)      n_rare",  sep = " = ", n_rare, fill = TRUE)
cat("               (Number of observed species for rare species)          D_rare",  sep = " = ", D_rare, fill = TRUE)
cat("               (Estimation of the sample converage for rare species)  C_rare" , sep = " = ", C_rare, fill = TRUE)
cat("               (Estimation of CV for rare species in ACE)             CV_rare", sep = " = ", CV_rare, fill = TRUE)
cat("               (Estimation of CV1 for rare species in ACE-1)          CV1_rare", sep = " = ", CV1_rare, fill = TRUE)
cat("\n", fill = TRUE)
cat("   \"Abundant\" Species Group: (Frequencies beyond the cut-off point) ", fill = TRUE)
cat("               (Number of observed individuals for abundant species)      n_abun",  sep = " = ", n_abun, fill = TRUE)
cat("               (Number of observed species for abundant species)          D_abun",  sep = " = ", D_abun, fill = TRUE)
}
source('C:/Users/USER/Dropbox/CHAO/[package]ChaoSpecies/GithubChaoSpecies_online/ChaoSpecies/R/ChaoSpecies.R', echo=TRUE)
setwd("C:/Users/USER/Dropbox/CHAO/[package]ChaoSpecies/GithubChaoSpecies_online/ChaoSpecies")
setwd("C:/Users/USER/Dropbox/CHAO/[package]ChaoSpecies/GithubChaoSpecies_online/ChaoSpecies/R")
source("basicAbuncat.R")
source("basicIncicat.R")
source("ChaoSpecies.R")
source("f.R")
source("Q.R")
source("RareSpeciesGroup.R")
source("SpecAbunAce.R")
source("SpecAbunAce1.R")
source("SpecAbunChao1.R")
source("SpecAbunChao1bc.R")
source("SpecAbunHomo.R")
source("SpecAbunHomoMle.R")
source("SpecAbunJack1.R")
source("SpecAbunJack2.R")
source("SpecAbunOut.R")
source("SpeciesAbundance.R")
source("SpeciesIncidence.R")
source("SpecInciChao2.R")
source("SpecInciChao2bc.R")
source("SpecInciHomo.R")
source("SpecInciJack1.R")
source("SpecInciJack2.R")
source("SpecInciModelh.R")
source("SpecInciModelh1.R")
source("SpecInciModelth.R")
source("SpecInciModelth1.R")
source("SpecInciOut.R")
source("DataTransform.R")
source("data.R")
setwd("C:/Users/USER/Dropbox/CHAO/[package]ChaoSpecies/ChaoSpecies(setwd)")
source("data.R")
ChaoSpecies(Birds, datatype="abundance")
ChaoSpecies(Birds, datatype="abundance")
SpeciesAbundance(data, method = "all", k = k, conf = conf)
basicAbun
data
SpeciesAbundance
setwd("C:/Users/USER/Dropbox/CHAO/[package]ChaoSpecies/GithubChaoSpecies_online/ChaoSpecies/R")
source("basicAbuncat.R")
source("basicIncicat.R")
source("ChaoSpecies.R")
source("f.R")
source("Q.R")
source("RareSpeciesGroup.R")
source("SpecAbunAce.R")
source("SpecAbunAce1.R")
source("SpecAbunChao1.R")
source("SpecAbunChao1bc.R")
source("SpecAbunHomo.R")
source("SpecAbunHomoMle.R")
source("SpecAbunJack1.R")
source("SpecAbunJack2.R")
source("SpecAbunOut.R")
source("SpeciesAbundance.R")
source("SpeciesIncidence.R")
source("SpecInciChao2.R")
source("SpecInciChao2bc.R")
source("SpecInciHomo.R")
source("SpecInciJack1.R")
source("SpecInciJack2.R")
source("SpecInciModelh.R")
source("SpecInciModelh1.R")
source("SpecInciModelth.R")
source("SpecInciModelth1.R")
source("SpecInciOut.R")
source("DataTransform.R")
source("data.R")
SpeciesAbundance
setwd("C:/Users/USER/Dropbox/CHAO/[package]ChaoSpecies/GithubChaoSpecies_online/ChaoSpecies/R")
source("basicAbuncat.R")
source("basicIncicat.R")
source("ChaoSpecies.R")
source("f.R")
source("Q.R")
source("RareSpeciesGroup.R")
source("SpecAbunAce.R")
source("SpecAbunAce1.R")
source("SpecAbunChao1.R")
source("SpecAbunChao1bc.R")
source("SpecAbunHomo.R")
source("SpecAbunHomoMle.R")
source("SpecAbunJack1.R")
source("SpecAbunJack2.R")
source("SpecAbunOut.R")
source("SpeciesAbundance.R")
source("SpeciesIncidence.R")
source("SpecInciChao2.R")
source("SpecInciChao2bc.R")
source("SpecInciHomo.R")
source("SpecInciJack1.R")
source("SpecInciJack2.R")
source("SpecInciModelh.R")
source("SpecInciModelh1.R")
source("SpecInciModelth.R")
source("SpecInciModelth1.R")
source("SpecInciOut.R")
source("DataTransform.R")
setwd("C:/Users/USER/Dropbox/CHAO/[package]ChaoSpecies/GithubChaoSpecies_online/ChaoSpecies/R")
source("basicAbuncat.R")
source("basicIncicat.R")
source("ChaoSpecies.R")
source("f.R")
source("Q.R")
source("RareSpeciesGroup.R")
source("SpecAbunAce.R")
source("SpecAbunAce1.R")
source("SpecAbunChao1.R")
source("SpecAbunChao1bc.R")
source("SpecAbunHomo.R")
source("SpecAbunHomoMle.R")
source("SpecAbunJack1.R")
source("SpecAbunJack2.R")
source("SpecAbunOut.R")
source("SpeciesAbundance.R")
source("SpeciesIncidence.R")
source("SpecInciChao2.R")
source("SpecInciChao2bc.R")
source("SpecInciHomo.R")
source("SpecInciJack1.R")
source("SpecInciJack2.R")
source("SpecInciModelh.R")
source("SpecInciModelh1.R")
source("SpecInciModelth.R")
source("SpecInciModelth1.R")
source("SpecInciOut.R")
source("DataTransform.R")
ChaoSpecies(Birds, "abundance")
setwd("C:/Users/USER/Dropbox/CHAO/[package]ChaoSpecies/GithubChaoSpecies_online/ChaoSpecies/R")
source("basicAbuncat.R")
source("basicIncicat.R")
source("ChaoSpecies.R")
source("f.R")
source("Q.R")
source("RareSpeciesGroup.R")
source("SpecAbunAce.R")
source("SpecAbunAce1.R")
source("SpecAbunChao1.R")
source("SpecAbunChao1bc.R")
source("SpecAbunHomo.R")
source("SpecAbunHomoMle.R")
source("SpecAbunJack1.R")
source("SpecAbunJack2.R")
source("SpecAbunOut.R")
source("SpeciesAbundance.R")
source("SpeciesIncidence.R")
source("SpecInciChao2.R")
source("SpecInciChao2bc.R")
source("SpecInciHomo.R")
source("SpecInciJack1.R")
source("SpecInciJack2.R")
source("SpecInciModelh.R")
source("SpecInciModelh1.R")
source("SpecInciModelth.R")
source("SpecInciModelth1.R")
source("SpecInciOut.R")
source("DataTransform.R")
ChaoSpecies(Birds, "abundance")
ChaoSpecies <-
function(data, datatype = c("abundance", "incidence"), k = 10, conf = 0.95, detail = c(TRUE, FALSE)){
if (k != round(k) || k < 0)
stop("Error: The cutoff t to define less abundant species must be non-negative integer!")
if (is.numeric(conf) == FALSE || conf > 1 || conf < 0)
stop("Error: confidence level must be a numerical value between 0 and 1, e.g. 0.95")
if (is.matrix(data) == T || is.data.frame(data) == T){
if (ncol(data) != 1 & nrow(data) != 1)
stop("Error: The data format is wrong.")
if (ncol(data) == 1){
data <- data[, 1]
} else {
data <- data[1, ]
}
}
data <- as.numeric(round(data))
if (datatype == "abundance"){
f <- function(i, data){length(data[which(data == i)])}
if (f(1, data) == sum(data)){
stop("Error: The information of data is not enough.")}
if (detail = T) basicAbun(data, k)
SpeciesAbundance(data, method = "all", k = k, conf = conf)
} else {
dat <- data[-1]; Q <- function(i, data){length(data[which(data == i)])}
if (Q(1, dat) == sum(dat)){
stop("Error: The information of data is not enough.")}
if (detail = T) basicInci(data, k)
SpeciesIncidence(data, method = "all", k = k, conf = conf)
}
}
ChaoSpecies <-
function(data, datatype = c("abundance", "incidence"), k = 10, conf = 0.95, detail = c(TRUE, FALSE)){
if (k != round(k) || k < 0)
stop("Error: The cutoff t to define less abundant species must be non-negative integer!")
if (is.numeric(conf) == FALSE || conf > 1 || conf < 0)
stop("Error: confidence level must be a numerical value between 0 and 1, e.g. 0.95")
if (is.matrix(data) == T || is.data.frame(data) == T){
if (ncol(data) != 1 & nrow(data) != 1)
stop("Error: The data format is wrong.")
if (ncol(data) == 1){
data <- data[, 1]
} else {
data <- data[1, ]
}
}
data <- as.numeric(round(data))
if (datatype == "abundance"){
f <- function(i, data){length(data[which(data == i)])}
if (f(1, data) == sum(data)){
stop("Error: The information of data is not enough.")}
if (detail == T) basicAbun(data, k)
SpeciesAbundance(data, method = "all", k = k, conf = conf)
} else {
dat <- data[-1]; Q <- function(i, data){length(data[which(data == i)])}
if (Q(1, dat) == sum(dat)){
stop("Error: The information of data is not enough.")}
if (detail == T) basicInci(data, k)
SpeciesIncidence(data, method = "all", k = k, conf = conf)
}
}
ChaoSpecies(Birds, "abundance")
ChaoSpecies(Birds, "abundance", detail = F)
ChaoSpecies(Birds, "abundance", detail = T)
setwd("C:/Users/USER/Dropbox/CHAO/[package]ChaoSpecies/GithubChaoSpecies_online/ChaoSpecies/R")
source("basicAbuncat.R")
source("basicIncicat.R")
source("ChaoSpecies.R")
source("f.R")
source("Q.R")
source("RareSpeciesGroup.R")
source("SpecAbunAce.R")
source("SpecAbunAce1.R")
source("SpecAbunChao1.R")
source("SpecAbunChao1bc.R")
source("SpecAbunHomo.R")
source("SpecAbunHomoMle.R")
source("SpecAbunJack1.R")
source("SpecAbunJack2.R")
source("SpecAbunOut.R")
source("SpeciesAbundance.R")
source("SpeciesIncidence.R")
source("SpecInciChao2.R")
source("SpecInciChao2bc.R")
source("SpecInciHomo.R")
source("SpecInciJack1.R")
source("SpecInciJack2.R")
source("SpecInciModelh.R")
source("SpecInciModelh1.R")
source("SpecInciModelth.R")
source("SpecInciModelth1.R")
source("SpecInciOut.R")
source("DataTransform.R")
ChaoSpecies(Birds, "abundance", detail=F)
ChaoSpecies <-
function(data, datatype = c("abundance", "incidence"), method = c("all", "Homogeneous", "Chao", "CE", "Jackknife"),
k = 10, conf = 0.95, detail = c(TRUE, FALSE)){
method <- match.arg(method)
if (k != round(k) || k < 0)
stop("Error: The cutoff t to define less abundant species must be non-negative integer!")
if (is.numeric(conf) == FALSE || conf > 1 || conf < 0)
stop("Error: confidence level must be a numerical value between 0 and 1, e.g. 0.95")
if (is.matrix(data) == T || is.data.frame(data) == T){
if (ncol(data) != 1 & nrow(data) != 1)
stop("Error: The data format is wrong.")
if (ncol(data) == 1){
data <- data[, 1]
} else {
data <- data[1, ]
}
}
data <- as.numeric(round(data))
if (datatype == "abundance"){
f <- function(i, data){length(data[which(data == i)])}
if (f(1, data) == sum(data)){
stop("Error: The information of data is not enough.")}
if (detail == T) basicAbun(data, k)
SpeciesAbundance(data, method = method, k = k, conf = conf)
} else {
dat <- data[-1]; Q <- function(i, data){length(data[which(data == i)])}
if (Q(1, dat) == sum(dat)){
stop("Error: The information of data is not enough.")}
if (detail == T) basicInci(data, k)
SpeciesIncidence(data, method = method = c("all", "Homogeneous", "Chao", "CE", "Jackknife"), k = k, conf = conf)
}
}
ChaoSpecies <-
function(data, datatype = c("abundance", "incidence"), method = c("all", "Homogeneous", "Chao", "CE", "Jackknife"),
k = 10, conf = 0.95, detail = c(TRUE, FALSE)){
method <- match.arg(method)
if (k != round(k) || k < 0)
stop("Error: The cutoff t to define less abundant species must be non-negative integer!")
if (is.numeric(conf) == FALSE || conf > 1 || conf < 0)
stop("Error: confidence level must be a numerical value between 0 and 1, e.g. 0.95")
if (is.matrix(data) == T || is.data.frame(data) == T){
if (ncol(data) != 1 & nrow(data) != 1)
stop("Error: The data format is wrong.")
if (ncol(data) == 1){
data <- data[, 1]
} else {
data <- data[1, ]
}
}
data <- as.numeric(round(data))
if (datatype == "abundance"){
f <- function(i, data){length(data[which(data == i)])}
if (f(1, data) == sum(data)){
stop("Error: The information of data is not enough.")}
if (detail == T) basicAbun(data, k)
SpeciesAbundance(data, method = method, k = k, conf = conf)
} else {
dat <- data[-1]; Q <- function(i, data){length(data[which(data == i)])}
if (Q(1, dat) == sum(dat)){
stop("Error: The information of data is not enough.")}
if (detail == T) basicInci(data, k)
SpeciesIncidence(data, method = method, k = k, conf = conf)
}
}
ChaoSpecies(Birds, "abundance", detail=F, method="Chao")
ChaoSpecies(Birds, "abundance", detail=F, method="CE")
ChaoSpecies(Birds, "abundance", detail=F, method="Jack")
